// 타입스크립트
// JS의 상위 집합(JS + 정적 타입 기능)
// 컴파일 시점에서 타입을 체크하여 오류를 예방
// 개발도구에서의 자동 완성, 리팩토링 등에 유용

// 타입스크립트의 기본 타입
// number, string, boolean, null, undefined
// + TS(튜플, enum, |, ?)

// TS VS JS
// 인터페이스, 제너릭, 고급타입(유니언, 교차, 타입가드)

// TS의 장단점

// 장점
// 1. 정적 타입 체킹
// 컴파일 시점에 오류를 발견, 런타임 에러를 줄일 수 있다.

// 2. 개발 도구의 효율성

// 3. 강력한 객체지향 프로그래밍 지원
// 클래스, 인터페이스, 제너릭 등의 JS보다 더 강력한 객체지향 프로그래밍 기능을 제공
// 대규모 프로젝트와 복잡한 코드 베이스 관리에 유용

// 단점

// 1. 학습 곡선의 어려움
// 2. 개발 시간이 증가
// 3. 라이브러리의 타입 정의

